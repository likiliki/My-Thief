# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# Copyright (C) 2016 <Liki_Liki> <sefirothonu@gmail.com>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

### DO NOT EDIT THIS FILE ###

from locale import gettext as _

from gi.repository import Gtk, WebKit # pylint: disable=E0611
import logging
logger = logging.getLogger('mythief')

from mythief_lib import Window
from mythief.AboutMythiefDialog import AboutMythiefDialog
from mythief.PreferencesMythiefDialog import PreferencesMythiefDialog

import webbrowser, codecs, commands, os
from urllib import urlopen

url = "www.google.es"   # GLOBAL URL

# See mythief_lib.Window.py for more details about how this class works
class MythiefWindow(Window):    
    __gtype_name__ = "MythiefWindow"
    
    def finish_initializing(self, builder): # pylint: disable=E1002        
        """Set up the main window"""
        super(MythiefWindow, self).finish_initializing(builder)

        self.AboutDialog = AboutMythiefDialog
        self.PreferencesDialog = PreferencesMythiefDialog
        
        # Code for other initialization actions should be added here.
        
        self.refreshbutton = self.builder.get_object("refreshbutton")
        self.homebutton = self.builder.get_object("homebutton") 
        self.backbutton = self.builder.get_object("backbutton") 
        self.forwardbutton = self.builder.get_object("forwardbutton") 
        self.zoominbutton = self.builder.get_object("zoominbutton") 
        self.zoomoutbutton = self.builder.get_object("zoomoutbutton") 
        self.mythief_window = self.builder.get_object("mythief_window")  
        self.textview1 = self.builder.get_object("textview1")  
        self.textbuffer = self.textview1.get_buffer()            
        self.scrolledwindow1 = self.builder.get_object("scrolledwindow1")   
        self.scrolledwindow2 = self.builder.get_object("scrolledwindow2") 
        self.entry1 = self.builder.get_object("entry1")
        self.entry2 = self.builder.get_object("entry2")
        self.entry3 = self.builder.get_object("entry3")
        self.toolbar1 = self.builder.get_object("toolbar1")  
        self.labelstatus = self.builder.get_object("labelstatus")  
        self.grid5 = self.builder.get_object("grid5")     
        self.grid3 = self.builder.get_object("grid3") 
        self.grid4 = self.builder.get_object("grid4") 
        self.buttonshowthief = self.builder.get_object("buttonshowthief") 
        self.buttonthief = self.builder.get_object("buttonthief")
                     
        self.entry1.set_text(url)   
        self.entry2.set_text("<img")
        self.entry3.set_text(">")     
        self.webview = WebKit.WebView()
        self.scrolledwindow1.add(self.webview)
        self.webview.show()
        self.webview.open("http://" + url)
        
        self.textbuffer.set_text("Show \n source code \n of results \n Here.") 
        
        self.webresult = WebKit.WebView()
        self.scrolledwindow2.add(self.webresult)
        self.webresult.show()
        self.mythief_window.maximize()
        
        # asign class O.S to elements of APP
        context = self.grid4.get_style_context()
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)          
        context = self.grid3.get_style_context() 
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)    
        context = self.grid5.get_style_context() 
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR) 
        
        self.grid3.hide()
        
        for attr in dir(Gtk.ButtonsType):
            print (attr)
        #print self.grid3.get_visible()
        
    def on_refreshbutton_clicked(self, widget): # Button Refresh
        self.webview.reload() 
        uri = self.webview.get_uri()
        self.labelstatus.set_text("Refresh :  " + uri)   
    
    def on_homebutton_clicked(self, widget): # button Home
        self.webview.open("http://" + url)
        uri = self.webview.get_uri()
        self.labelstatus.set_text("Home :  " + uri)        
        
    def on_backbutton_clicked(self, widget): # button Back
        if self.webview.can_go_back():
            self.webview.go_back()
            uri = self.webview.get_uri()
            self.labelstatus.set_text("Back to :  " + uri)
        
    def on_forwardbutton_clicked(self, widget): # button Forward  
        if self.webview.can_go_forward():
            self.webview.go_forward()
            uri = self.webview.get_uri()
            self.labelstatus.set_text("Forward to :  " + uri)              
            
    def on_entry1_activate(self, widget): # Url Entry Activate
    	uri = widget.get_text()
    	if uri[0:7] != "http://":
			uri = "http://" + uri        

        self.webview.open(uri)         
        self.labelstatus.set_text("Go to :  " + uri)    
        
    def on_zoominbutton_clicked(self, widget): # button Zoom In
        self.webview.zoom_in()
        uri = self.webview.get_uri()
        self.labelstatus.set_text("Zoom In to :  " + uri)
        
    def on_zoomoutbutton_clicked(self, widget): # button Zoom Out
        self.webview.zoom_out()                   
        uri = self.webview.get_uri()
        self.labelstatus.set_text("Zoom Out to :  " + uri)
        
    def on_buttonshowthief_clicked(self, widget): # button Web-Thief
        tool = self.grid3.get_visible()
        if tool:
            self.grid3.hide()
        else:
            self.grid3.show()   
            
    def on_buttonthief_clicked(self, widget): # button buttonthief
        file_location = ".temp_find.html"
        file_force_code = ".temp_find.html_utf8_force"        
        inicio_busca = self.entry2.get_text()
        fin_busca = self.entry3.get_text() 

        # alert message - empty entryText to start of find
        self.dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO,
            Gtk.ButtonsType.CLOSE, "Nothing to Find. Enter any html tag, or press F1 to see Examples.") 

        # read url and write to file
        ur = self.webview.get_uri()
        html = urlopen(ur).read()
        file1 = open(file_location, "w")
        file1.writelines(html)
        file1.close()
                
        # codec file to utf-8
        file_encoding = commands.getoutput('file -b --mime-encoding %s' % file_location)
        file_stream = codecs.open(file_location, 'r', file_encoding)
        file_output = codecs.open(file_force_code, 'w', 'utf-8')
        for l in file_stream:
            file_output.write(l)  
        file_stream.close()
        file_output.close()        
        
        # read file utf-8
        file1 = open(file_force_code, "r")
        html = file1.read()
        htmlresults = ""

        # SEE OPTIONS OF FIND ----- NOTHING, ALL CODE, EXTRACT TAG 
        if inicio_busca == "": # NOTHING TO FIND        	
            response = self.dialog.run() # show alert
            self.dialog.destroy ()

        elif (inicio_busca == "all" or inicio_busca == "ALL"): # SHOW ALL sOURCE cODE
        	self.textbuffer.set_text(html) 
        	htmlresults = html

        else:
	        #FIND IN HTML FOR EXTRACT TAGS-------------------------------------
	        pos_imagen = html.find(inicio_busca)         
	        self.textbuffer.set_text(" RESULTS OF WEB-THIEF(source-code) \n\n ") 
	        htmlresults = "<html><body><p> RESULTS OF WEB-THIEF extract html</p>"
	        
	        while pos_imagen >= 0: # bucle while: find html tags

	            pos_imagen2 = pos_imagen
	            pos_fin_image = html.find(fin_busca, pos_imagen2)
	            tamanio = len(fin_busca)
	            bites = pos_fin_image - pos_imagen + tamanio

	            #linea de datos
	            file1.seek(pos_imagen2)
	            linea = file1.read(bites) + "\n"
	                
	            self.textbuffer.insert_at_cursor(linea) 
	            htmlresults = htmlresults + linea

	            pos_imagen = html.find(inicio_busca, pos_imagen2 + 1)        
	        #FIND IN HTML FOR EXTRACT TAGS---------------------------------        
	        htmlresults =  htmlresults + "</body></html>"

        file1.close()
        self.webresult.load_html_string(htmlresults, "") # open results in webview

    def on_mythief_window_destroy(self, widget): # exit of app
        try:
            print 'Removing temporal files'
            os.remove('.temp_find.html')
            os.remove('.temp_find.html_utf8_force')
        except: 
            pass
        